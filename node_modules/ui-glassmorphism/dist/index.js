function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var styles = {"gl-card":"_2ZlhA","gl-card--outlined":"_Qo5Xz","gl-card--light":"_rvMtp","gl-card--dark":"_1pMBm"};

var RGBFromCSSColor = function RGBFromCSSColor(color) {
  var canvas = document.createElement('canvas');
  canvas.id = 'color-canvas';
  canvas.width = 2;
  canvas.height = 2;
  canvas.style.zIndex = -1;
  canvas.style.position = 'absolute';
  canvas.style.border = '1px solid';
  var body = document.getElementsByTagName('body')[0];
  body.appendChild(canvas);
  var ctx = canvas.getContext('2d');
  ctx.fillStyle = color;
  ctx.fillRect(0, 0, 2, 2);
  var imgData = ctx.getImageData(0, 0, 2, 2);
  var colorArray = imgData.data.slice(2 * 4, 2 * 4 + 4);
  document.getElementById('color-canvas').remove();
  return [colorArray[0], colorArray[1], colorArray[2]];
};

var isMyReactComponent = function isMyReactComponent(component) {
  var componentName = '';

  if (component && component.type && typeof component.type !== 'string') {
    componentName = component.type.displayName;
  }

  return componentName && componentName.includes('Gu');
};
var passDownProp = function passDownProp(children, props, propName) {
  return React.Children.map(children, function (child) {
    if (isMyReactComponent(child)) {
      var newProps = _extends({}, child.props);

      if (typeof propName === 'string') {
        if (props[propName] !== undefined) {
          newProps[propName] = child.props[propName] === undefined ? props[propName] : child.props[propName];
        }
      } else if (Array.isArray(propName)) {
        propName.forEach(function (prop) {
          if (props[prop] === undefined) return;
          newProps[prop] = child.props[prop] === undefined ? props[prop] : child.props[prop];
        });
      }

      return React.cloneElement(child, newProps);
    } else {
      return child;
    }
  });
};

var globalModule = {};

var getModuleClasses = function getModuleClasses(localModule, classNames) {
  var styles = _extends({}, localModule, globalModule);

  return classNames.replace(/^\s+|\s+$/g, '').split(/\s+/).map(function (cl) {
    return styles[cl.trim()];
  }).join(' ').trim();
};

var Card = function Card(props) {
  var style = props.style,
      children = props.children,
      _props$dark = props.dark,
      dark = _props$dark === void 0 ? false : _props$dark,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      color = props.color,
      _props$blur = props.blur,
      blur = _props$blur === void 0 ? 4 : _props$blur,
      _props$outlined = props.outlined,
      outlined = _props$outlined === void 0 ? false : _props$outlined,
      _props$transparency = props.transparency,
      transparency = _props$transparency === void 0 ? 0.2 : _props$transparency;

  var background = function background() {
    var colorLight = '255, 255, 255';
    var colorDark = '0, 0, 0';
    var rgbColor = colorLight;

    if (dark) {
      rgbColor = colorDark;
    }

    if (color) {
      var _RGBFromCSSColor = RGBFromCSSColor(color),
          r = _RGBFromCSSColor[0],
          g = _RGBFromCSSColor[1],
          b = _RGBFromCSSColor[2];

      if (r === 0 && g === 0 && b === 0) {
        if (dark) {
          rgbColor = colorDark;
        } else {
          rgbColor = colorLight;
        }
      } else {
        rgbColor = r + ", " + g + ", " + b;
      }
    }

    return "rgba(" + rgbColor + ", " + transparency + ")";
  };

  var getClasses = function getClasses(key) {
    switch (key) {
      case 'card':
        return getModuleClasses(styles, "\n            gl-card \n            gl-card--" + (dark ? 'dark' : 'light') + "\n            " + (outlined ? 'gl-card--outlined' : '') + "\n          ");
    }
  };

  return /*#__PURE__*/React__default.createElement("div", {
    style: _extends({}, style, {
      '--gl-card-blur': blur + "px",
      '--gl-card-background': background()
    }),
    className: getClasses('card') + " " + className
  }, children);
};

Card.displayName = 'GuCard';

var styles$1 = {"gl-background":"_3sq2w"};

var useResizeObserver = function useResizeObserver(element) {
  var current = element && element.current;
  var observer = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      width = _React$useState[0],
      setWidth = _React$useState[1];

  var _React$useState2 = React__default.useState(0),
      height = _React$useState2[0],
      setHeight = _React$useState2[1];

  React__default.useLayoutEffect(function () {
    if (observer && observer.current && current) {
      observer.current.unobserve(current);
    }

    observer.current = new ResizeObserver(function (entries) {
      var currentWidth = width;
      var currentHeight = height;
      entries.forEach(function (entry) {
        var _ref = entry && entry.target || {},
            clientHeight = _ref.clientHeight,
            clientWidth = _ref.clientWidth;

        var isWidthChanged = currentWidth !== clientWidth;
        var isHeightChanged = currentHeight !== clientHeight;

        if (isWidthChanged) {
          setWidth(clientWidth);
        }

        if (isHeightChanged) {
          setHeight(clientHeight);
        }
      });
    });
    observe();
    return function () {
      return unobserve();
    };
  }, [current]);

  var observe = function observe() {
    if (isObserverValid()) {
      observer.current.observe(element.current);
    }
  };

  var unobserve = function unobserve() {
    if (isObserverValid()) {
      observer.current.unobserve(element.current);
    }
  };

  var isObserverValid = function isObserverValid() {
    return element && element.current && observer.current;
  };

  return {
    width: width,
    height: height
  };
};

var Background = function Background(props) {
  var style = props.style,
      children = props.children,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$blur = props.blur,
      blur = _props$blur === void 0 ? 100 : _props$blur,
      img = props.img;
  var bgNode = React__default.useRef(null);

  var _useResizeObserver = useResizeObserver(bgNode),
      height = _useResizeObserver.height,
      width = _useResizeObserver.width;

  var getClasses = function getClasses(key) {
    switch (key) {
      default:
        return getModuleClasses(styles$1, key);
    }
  };

  var background = function background() {
    return img ? "url(" + img + ")" : "linear-gradient(\n          90deg,\n          var(--gradient-left) 0%,\n          var(--gradient-right) 100%)\n        ";
  };

  var getChildren = function getChildren() {
    return passDownProp(children, props, 'dark');
  };

  return /*#__PURE__*/React__default.createElement("div", {
    style: _extends({}, style, {
      '--gl-background-blur': blur + "px",
      '--gl-background-value': background(),
      '--gl-background-width': width + "px",
      '--gl-background-height': height + "px"
    }),
    ref: bgNode,
    className: getClasses('gl-background') + " " + className
  }, getChildren());
};

Background.displayName = 'GuBackground';

exports.Background = Background;
exports.Card = Card;
//# sourceMappingURL=index.js.map
